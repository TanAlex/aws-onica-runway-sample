namespace: ${namespace}
stacker_bucket: ${stacker_bucket_name}

sys_path: ./

# stacks:
#   tf-state:
#     template_path: templates/tf_state.yml  # also supports json templates
#     variables:
#       BucketName: ${default tf_state_bucket_name::undefined}
#       TableName: ${default tf_state_table_name::undefined}
mappings:
  AmiMap:
    us-east-1:
      NAT: ami-ad227cc4
      centos7: ami-074e2d6769f445be5
      ubuntu1404: ami-74e27e1c
      bastion: ami-074e2d6769f445be5
    us-west-2:
      NAT: ami-290f4119
      centos7: ami-01ed306a12b7d1c96
      ubuntu1404: ami-5189a661
      bastion: ami-01ed306a12b7d1c96

vpc_parameters: &vpc_parameters
  VpcId: ${output vpc::VpcId}
  DefaultSG: ${output vpc::DefaultSG}
  PublicSubnets: ${output vpc::PublicSubnets}
  PrivateSubnets: ${output vpc::PrivateSubnets}
  AvailabilityZones: ${output vpc::AvailabilityZones}

# targets:
#   - name: all
#     requires: [ vpc, webserver ]

stacks:
  - name: vpc
    #class_path: stacker_blueprints.vpc.VPC
    template_path: templates/vpc.json
    # Flag to enable/disable a stack. Default is true
    enabled: true
    variables:
      # Only build 2 AZs, can be overridden with -p on the command line
      # Note: If you want more than 4 AZs you should add more subnets below
      #       Also you need at least 2 AZs in order to use the DB because
      #       of the fact that the DB blueprint uses MultiAZ
      AZCount: 2
      # Enough subnets for 4 AZs
      PublicSubnets:
        - 10.128.0.0/24
        - 10.128.1.0/24
        - 10.128.2.0/24
        - 10.128.3.0/24
      PrivateSubnets:
        - 10.128.8.0/22
        - 10.128.12.0/22
        - 10.128.16.0/22
        - 10.128.20.0/22
      CidrBlock: 10.128.0.0/16
      # Uncomment if you want an internal hosted zone for the VPC
      # If provided, it will be added to the dns search path of the DHCP
      # Options
      InternalDomain: internal
  - name: bastion
    #class_path: stacker_blueprints.bastion.Bastion
    template_path: templates/bastion.json
    enabled: true
    variables:
      # Extends the parameters dict with the contents of the vpc_parameters
      # anchor. Basically we're including all VPC Outputs in the parameters
      # of the bastion stack. Note: Stacker figures out, automatically, which
      # parameters the stack actually needs and only submits those to each
      # stack. For example, most stacks are in the PrivateSubnets, but not
      # the PublicSubnets, but stacker deals with it for you.
      <<: *vpc_parameters
      InstanceType: t2.micro
      OfficeNetwork: 162.156.1.187/32
      MinSize: 1
      MaxSize: 1
      SshKeyName: default
      ImageName: bastion
  # - name: myDB
  #   class_path: stacker_blueprints.postgres.PostgresRDS
  #   # this stack is locked, which means it will not update unless you pass the
  #   # stack name "myDB" on the command line with --force
  #   locked: true
  #   enabled: true
  #   variables:
  #     << : *vpc_parameters
  #     InstanceType: db.m3.medium
  #     AllocatedStorage: 10
  #     MasterUser: dbuser
  #     MasterUserPassword: ExamplePassword!
  #     DBName: db1
  #     # If the following are uncommented and you set an InternalDomain above
  #     # in the VPC a CNAME alias of InternalHostname will be setup pointing at
  #     # the database.
  #     #InternalZoneId: vpc::InternalZoneId
  #     #InternalZoneName: vpc::InternalZoneName
  #     #InternalHostname: mydb
  - name: webserver
    template_path: templates/webserver.json
    #class_path: blueprints.asg.AutoscalingGroup
    enabled: true
    #requires: [vpc]
    variables:
      <<: *vpc_parameters
      InstanceType: t2.micro
      ImageName: centos7
      MinSize: 2
      MaxSize: 2
      SshKeyName: default
      # If commented out, no load balancer will be created.
      ELBHostName: mysite
      # Uncomment if you have a cert loaded in EC2 already and want to enable
      # SSL on the load balancer.
      #ELBCertName: mycert
      UserData: |
        #!/bin/bash
        sudo yum -y install epel-release
        sudo yum -y install nginx
        HOSTNAME=$(hostname)
        sudo sed -i -e "s/<p>This page is used to test/<p>hello $HOSTNAME<\/p><p>This page is used to test/" /usr/share/nginx/html/index.html
        sudo systemctl enable nginx
        sudo systemctl start nginx
